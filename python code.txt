from flask import Flask, render_template, request
import pandas as pd
from pymongo import MongoClient

app = Flask(_name_)
client = MongoClient('mongodb://localhost:27017/')  # MongoDB connection

# Route to display the main page
@app.route('/')
def index():
    return render_template('index.html')

# Route to display the form
@app.route('/form')
def form():
    return render_template('form.html')

# Route to handle form submission
@app.route('/submit', methods=['POST'])
def submit():
    name = request.form.get('name')
    email = request.form.get('email')
    phno = request.form.get('phno')
    branch = request.form.get('branch')
    save_data(name, email, phno, branch)
    return 'Form submitted successfully!'

# Route to display the file upload form
@app.route('/upload')
def upload_form():
    return render_template('upload_form.html')

# Route to handle file upload and analysis
@app.route('/analyze', methods=['POST'])
def analyze():
    file = request.files['file']
    if file.filename.endswith('.xlsx'):
        df = pd.read_excel(file)
        rows, columns = df.shape
        row_headings = df.columns.tolist()
        column_headings = df.index.tolist()
        data_info = {
            'rows': rows,
            'columns': columns,
            'row_headings': row_headings,
            'column_headings': column_headings,
            'data': df.head().to_html()
        }
        store_analysis(data_info)
        return render_template('analysis_result.html', data_info=data_info)
    else:
        return 'Invalid file format. Please upload an Excel file.'

# Function to save form data to MongoDB
def save_data(name, email, phno, branch):
    db = client['mydatabase']  # Use your preferred database name
    collection = db['formdata']
    data = {'name': name, 'email': email, 'phno': phno, 'branch': branch}
    collection.insert_one(data)

# Function to store analysis in MongoDB
def store_analysis(data_info):
    db = client['my_database']  # Use your preferred database name
    collection = db['analysis']
    collection.insert_one(data_info)

if _name_ == '_main_':
    app.run(debug=True)